// Generated by gencpp from file line_follower/sensores.msg
// DO NOT EDIT!


#ifndef LINE_FOLLOWER_MESSAGE_SENSORES_H
#define LINE_FOLLOWER_MESSAGE_SENSORES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace line_follower
{
template <class ContainerAllocator>
struct sensores_
{
  typedef sensores_<ContainerAllocator> Type;

  sensores_()
    : IR_1(0)
    , IR_2(0)
    , US_1(0.0)  {
    }
  sensores_(const ContainerAllocator& _alloc)
    : IR_1(0)
    , IR_2(0)
    , US_1(0.0)  {
  (void)_alloc;
    }



   typedef int8_t _IR_1_type;
  _IR_1_type IR_1;

   typedef int8_t _IR_2_type;
  _IR_2_type IR_2;

   typedef float _US_1_type;
  _US_1_type US_1;





  typedef boost::shared_ptr< ::line_follower::sensores_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::line_follower::sensores_<ContainerAllocator> const> ConstPtr;

}; // struct sensores_

typedef ::line_follower::sensores_<std::allocator<void> > sensores;

typedef boost::shared_ptr< ::line_follower::sensores > sensoresPtr;
typedef boost::shared_ptr< ::line_follower::sensores const> sensoresConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::line_follower::sensores_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::line_follower::sensores_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::line_follower::sensores_<ContainerAllocator1> & lhs, const ::line_follower::sensores_<ContainerAllocator2> & rhs)
{
  return lhs.IR_1 == rhs.IR_1 &&
    lhs.IR_2 == rhs.IR_2 &&
    lhs.US_1 == rhs.US_1;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::line_follower::sensores_<ContainerAllocator1> & lhs, const ::line_follower::sensores_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace line_follower

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::line_follower::sensores_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::line_follower::sensores_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::line_follower::sensores_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::line_follower::sensores_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::line_follower::sensores_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::line_follower::sensores_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::line_follower::sensores_<ContainerAllocator> >
{
  static const char* value()
  {
    return "37c5405c247030f98d7b9d9315f2b46d";
  }

  static const char* value(const ::line_follower::sensores_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x37c5405c247030f9ULL;
  static const uint64_t static_value2 = 0x8d7b9d9315f2b46dULL;
};

template<class ContainerAllocator>
struct DataType< ::line_follower::sensores_<ContainerAllocator> >
{
  static const char* value()
  {
    return "line_follower/sensores";
  }

  static const char* value(const ::line_follower::sensores_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::line_follower::sensores_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#fieldtype1 fieldname1\n"
"#\n"
"int8 IR_1\n"
"int8 IR_2\n"
"float32 US_1\n"
;
  }

  static const char* value(const ::line_follower::sensores_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::line_follower::sensores_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.IR_1);
      stream.next(m.IR_2);
      stream.next(m.US_1);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sensores_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::line_follower::sensores_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::line_follower::sensores_<ContainerAllocator>& v)
  {
    s << indent << "IR_1: ";
    Printer<int8_t>::stream(s, indent + "  ", v.IR_1);
    s << indent << "IR_2: ";
    Printer<int8_t>::stream(s, indent + "  ", v.IR_2);
    s << indent << "US_1: ";
    Printer<float>::stream(s, indent + "  ", v.US_1);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LINE_FOLLOWER_MESSAGE_SENSORES_H
